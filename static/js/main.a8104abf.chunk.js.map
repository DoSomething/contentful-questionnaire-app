{"version":3,"sources":["components/ConfigScreen.tsx","components/EntryEditor.tsx","components/Page.tsx","components/Sidebar.tsx","components/QuestionEditor.js","components/Field.tsx","components/Dialog.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Entry","Page","Sidebar","QuestionEditor","questionTemplate","title","placeholder","actionId","useState","field","getValue","questions","updateQuestions","useEffect","setValue","window","updateHeight","onChange","index","attribute","value","updatedQuestion","updatedQuestions","splice","map","question","style","marginTop","labelText","type","e","target","width","size","buttonType","onClick","icon","fontStyle","rel","href","Field","Dialog","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","LOCATION_ENTRY_EDITOR","EntryEditor","LOCATION_DIALOG","LOCATION_ENTRY_SIDEBAR","LOCATION_PAGE","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.a8104abf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from '@contentful/app-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>Questionnaire Action Questions Config</Heading>\n          <Paragraph>Welcome to your contentful app. This is your config page.</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { EditorExtensionSDK } from '@contentful/app-sdk';\n\ninterface EditorProps {\n  sdk: EditorExtensionSDK;\n}\n\nconst Entry = (props: EditorProps) => {\n  return <Paragraph>Hello Entry Editor Component</Paragraph>;\n};\n\nexport default Entry;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { PageExtensionSDK } from '@contentful/app-sdk';\n\ninterface PageProps {\n  sdk: PageExtensionSDK;\n}\n\nconst Page = (props: PageProps) => {\n  return <Paragraph>Hello Page Component</Paragraph>;\n};\n\nexport default Page;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { SidebarExtensionSDK } from '@contentful/app-sdk';\n\ninterface SidebarProps {\n  sdk: SidebarExtensionSDK;\n}\n\nconst Sidebar = (props: SidebarProps) => {\n  return <Paragraph>Hello Sidebar Component</Paragraph>;\n};\n\nexport default Sidebar;\n","import React, { useState, useEffect } from 'react';\nimport { \n\tButton,\n\tFormLabel,\n\tHelpText,\n\tSectionHeading,\n\tTextField,\n\tTextInput,\n} from '@contentful/forma-36-react-components';\n\nconst QuestionEditor = ({sdk}) => {\n\tconst questionTemplate = { title: \"\", placeholder: \"\", actionId: \"\"\t };\n\n\tconst [questions, updateQuestions] = useState(sdk.field.getValue() || []);\n\n\tuseEffect(() => {\n\t\tsdk.field.setValue(questions);\n\t\tsdk.window.updateHeight();\n\t}, [questions, sdk.field, sdk.window])\n\n\tconst onChange = (index, attribute, value) => {\n\t\tconst updatedQuestion = {...questions[index], [attribute]: value};\n\t\tconst updatedQuestions = [...questions];\n\t\tupdatedQuestions.splice(index, 1, updatedQuestion);\n\t\tupdateQuestions(updatedQuestions);\n\t}\n\n  return (\n  \t<div>\n\t\t\t{questions.map((question, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={index}>\t\n\t\t\t\t\t\t\t<SectionHeading style={{ marginTop: 10 }}>Question {index + 1}</SectionHeading>\n\n\t\t\t\t  \t\t<TextField \n\t\t\t\t  \t\t\tstyle={{ marginTop: 10 }}\n\t\t\t\t  \t\t\tlabelText=\"Title\"\n\t\t\t\t  \t\t\ttype=\"text\" \n\t\t\t\t  \t\t\tonChange={(e) => onChange(index, 'title', e.target.value)}\n\t\t\t\t  \t\t\tvalue={question.title} \n\t\t\t\t  \t\t/>\n\n\t\t\t\t  \t\t<TextField \n\t\t\t\t  \t\t\tstyle={{ marginTop: 10 }}\n\t\t\t\t  \t\t\tlabelText=\"Placholder\"\n\t\t\t\t  \t\t\ttype=\"text\" \n\t\t\t\t  \t\t\tonChange={(e) => onChange(index, 'placeholder', e.target.value)}\n\t\t\t\t  \t\t\tvalue={question.placeholder} \n\t\t\t\t  \t\t/>\n\n\t\t\t\t  \t\t<FormLabel style={{ marginTop: 10 }}>Action ID</FormLabel>\n\t\t\t\t  \t\t<TextInput \n\t\t\t\t  \t\t\ttype=\"number\" \n\t\t\t\t  \t\t\twidth=\"small\"\n\t\t\t\t  \t\t\tonChange={(e) => onChange(index, 'actionId', e.target.value)}\n\t\t\t\t  \t\t\tvalue={question.actionId} \n\t\t\t\t  \t\t/>\n\n\t\t  \t\t\t\t<Button style={{ marginTop: 10 }} size=\"small\" buttonType=\"negative\" onClick={() => {\n\t\t  \t\t\t\t\tconst updatedQuestions = [...questions];\n\t\t  \t\t\t\t\tupdatedQuestions.splice(index, 1);\n\t\t  \t\t\t\t\tupdateQuestions(updatedQuestions);\n\t\t  \t\t\t\t}}>\n\t\t  \t\t\t\t\tDelete Question\n\t\t  \t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\n  \t\t<Button  style={{ marginTop: 20 }} size=\"medium\" icon=\"Plus\" buttonType=\"positive\" onClick={() => updateQuestions([...questions, questionTemplate])}>\n        \tAdd Question\n      </Button>\n\n\t\t\t<HelpText \n\t\t\t\tstyle={{ marginTop: 10, fontStyle: 'italic' }}\n\t\t\t>\n\t\t\t\tThe questions appearing in the Questionnaire. Each question requires a Title, Placeholder Text, & \n\t\t\t\tvalid <a target=\"_blank\" rel=\"noreferrer\" href=\"https://bit.ly/30xpNFC\">Rogue Action ID</a>.\n\t\t\t</HelpText>\n  \t</div>\n  );\n};\n\nexport default QuestionEditor;\n","import React from 'react';\nimport { FieldExtensionSDK } from '@contentful/app-sdk';\n\nimport QuestionEditor from './QuestionEditor';\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = (props: FieldProps) => {\n  return <QuestionEditor sdk={props.sdk} />\n};\n\nexport default Field;\n","import React from 'react';\nimport { Paragraph } from '@contentful/forma-36-react-components';\nimport { DialogExtensionSDK } from '@contentful/app-sdk';\n\ninterface DialogProps {\n  sdk: DialogExtensionSDK;\n}\n\nconst Dialog = (props: DialogProps) => {\n  return <Paragraph>Hello Dialog Component</Paragraph>;\n};\n\nexport default Dialog;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  SidebarExtensionSDK,\n  DialogExtensionSDK,\n  EditorExtensionSDK,\n  PageExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport EntryEditor from './components/EntryEditor';\nimport Page from './components/Page';\nimport Sidebar from './components/Sidebar';\nimport Field from './components/Field';\nimport Dialog from './components/Dialog';\n\nimport LocalhostWarning from './components/LocalhostWarning';\n\nif (process.env.NODE_ENV === 'development' && window.self === window.top) {\n  // You can remove this if block before deploying your app\n  const root = document.getElementById('root');\n  render(<LocalhostWarning />, root);\n} else {\n  init((sdk) => {\n    const root = document.getElementById('root');\n\n    // All possible locations for your app\n    // Feel free to remove unused locations\n    // Dont forget to delete the file too :)\n    const ComponentLocationSettings = [\n      {\n        location: locations.LOCATION_APP_CONFIG,\n        component: <Config sdk={sdk as AppExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_FIELD,\n        component: <Field sdk={sdk as FieldExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_EDITOR,\n        component: <EntryEditor sdk={sdk as EditorExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_DIALOG,\n        component: <Dialog sdk={sdk as DialogExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_ENTRY_SIDEBAR,\n        component: <Sidebar sdk={sdk as SidebarExtensionSDK} />,\n      },\n      {\n        location: locations.LOCATION_PAGE,\n        component: <Page sdk={sdk as PageExtensionSDK} />,\n      },\n    ];\n\n    // Select a component depending on a location in which the app is rendered.\n    ComponentLocationSettings.forEach((componentLocationSetting) => {\n      if (sdk.location.is(componentLocationSetting.location)) {\n        render(componentLocationSetting.component, root);\n      }\n    });\n  });\n}\n"],"sourceRoot":""}